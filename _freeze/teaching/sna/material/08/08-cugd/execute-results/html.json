{
  "hash": "37e20fad9b1abef02e363cb87a3ec061",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor:  Termeh Shafie\ntitle: \"Social Network Analysis\"\nsubtitle: \"Worksheet 8: Conditional Uniform Graph Distributions\"\nlightbox: auto\ntoc: true\nformat:\n  html:\n    embed-resources: true\n    fig-width: 10\n    fig-height: 10\n---\n\n# Introduction\n\nIn this session, we will be using conditional uniform graph distributions to simulate random networks. These random networks correspond to the null model and generate the null distribution to which we can compare our observed features to. Thus, we can conclude whether or not an observed feature of interested is significantly different than those from the null model. Most of the examples here are those presented in the lecture.\n\n## Packages needed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(statnet)\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(intergraph)\nlibrary(patchwork)\nlibrary(networkdata)\n```\n:::\n\n\n## Object types\n\nWe will be primarily be working with matrix, network and graph objects. It is important that you can understand and pay attention to these since some functions only work with graph objects, and others with network/matrix objects. We try to keep it clear here by using suffix *g*, *net* and *mat* to clarify object assignment.\n\n# The Coleman Data\n\n## Load a dataset and extract adjacency matrix\n\nWe are going to use a data set, `coleman`, which is automatically loaded with the package `statnet`. To get information about it type `?coleman` and select `Colemans High School Friendship Data`. This should open a help file with information about the data set. Read the description of the data in the help file in order to know what you are working with. To load the data in your session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(coleman, package = \"sna\")\n```\n:::\n\n\nAs described in the help file, the data set is an array with 2 observations on the friendship nominations of 73 students (one for fall and one for spring). We will start by focusing on the fall network here, and create the adjacency matrix for the network:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfall_mat <- coleman[1,,] \n```\n:::\n\n\n**Q1**: How can you check whether the network is directed or undirected?\n\n**Q2**: How can you calculate the number of ties you have in the fall network?\n\n## Visualize the network\n\nCreate a graph object from the adjacency matrix and visualize the network:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfall_g <- graph_from_adjacency_matrix(fall_mat, \"directed\")\nfall_p <- ggraph(fall_g , layout = \"nicely\") + \n          geom_edge_link(edge_colour = \"#666060\", end_cap = circle(9,\"pt\"), \n                         n = 2, edge_width = 0.4, edge_alpha = 1, \n                         arrow = arrow(angle = 15, \n                         length = unit(0.1, \"inches\"), \n                         ends = \"last\", type = \"closed\"))  +\n\t        geom_node_point(fill = \"#525252\",colour = \"#FFFFFF\", \n\t                       size = 5, stroke = 1.1, shape = 21) + \n\t        theme_graph() + \n          ggtitle(\"fall friendship network\") +\n\t        theme(legend.position = \"none\")\nfall_p\n```\n\n::: {.cell-output-display}\n![](08-cugd_files/figure-html/unnamed-chunk-4-1.png){width=1056}\n:::\n:::\n\n\n# Uniform graph distribution given expected density: ${\\cal{U}}|E(L)$\n\nCalculate the density of the Coleman fall network. Density is given as the number of present ties divided by the total number of possible ties in the network. We can use the adjacency matrix to calculate this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(fall_mat)/(dim(fall_mat)[1]*(dim(fall_mat)[1]-1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.04623288\n```\n\n\n:::\n:::\n\n\nbut we can also use the graph object and call a function from `igraph`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedge_density(fall_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.04623288\n```\n\n\n:::\n:::\n\n\nTo generate one random graph with the same density *on average* as the observed fall network, we write:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim1_mat <- rgraph(n = dim(fall_mat)[1], m = 1, \n                 tprob = edge_density(fall_g), mode = \"digraph\")\nsim1_g <- graph_from_adjacency_matrix(sim1_mat, \"directed\")\n```\n:::\n\n\nMake sure you understand all arguments included. The random network and the observed network may not have the exact same number of edges but *stochastically*, it has the same density:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(sim1_mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 267\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(fall_mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 243\n```\n\n\n:::\n:::\n\n\nNow we can plot the random network we generated next to the observed one to compare them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim1_p <- ggraph(sim1_g, layout = \"nicely\") + \n  geom_edge_link(edge_colour = \"#666060\", \n                 end_cap = circle(9,\"pt\"), n = 2, \n                 edge_width = 0.4, edge_alpha = 1, \n                 arrow = arrow(angle = 15,\n                               length = unit(0.1, \"inches\"), \n                               ends = \"last\", type = \"closed\"))  +\n  geom_node_point(fill = \"#525252\", colour = \"#FFFFFF\", \n                  size = 5, stroke = 1.1, shape = 21) + \n  theme_graph() + \n  ggtitle(\"random network\") +\n  theme(legend.position = \"none\")\nfall_p + sim1_p # 'patchwork' required for this\n```\n\n::: {.cell-output-display}\n![](08-cugd_files/figure-html/unnamed-chunk-9-1.png){width=1920}\n:::\n:::\n\n\n**Q3**: Can you note any obvious differences in structure?\n\n# Uniform graph distribution given exact density (number of edges): ${\\cal{U}}|L$\n\nNow we generate a random network with *exactly* the same density. This is done with a slightly different function called `rgnm()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim2_mat <- rgnm(n = 1, nv = dim(fall_mat)[1], m = sum(fall_mat), mode = \"digraph\")\n```\n:::\n\n\nMake sure you understand all arguments included. Now we calculate the out-degrees for this random network. This can be done using the adjacency matrix `sim2_mat` or by converting the matrix into a graph and using an `igraph` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim2_outdeg <- rowSums(sim2_mat)\n# using graph object:\nsim2_g <- graph_from_adjacency_matrix(sim2_mat, \"directed\")\ndegree(sim2_g, mode = \"out\")\n```\n:::\n\n\nWe can do the same to calculate the out-degree distribution for the observed network:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfall_outdeg <- rowSums(fall_mat)\n# using graph object:\nigraph::degree(fall_g, mode = \"out\")\n```\n:::\n\n\nLet's plot these two out-degree distributions next to each other (note the difference in x axes when interpreting results):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfall_outdeg <- as.data.frame(fall_outdeg)\np_fall_outdeg <- ggplot(fall_outdeg, aes(x=fall_outdeg)) +\n  geom_bar(color=\"darkgrey\", fill=\"lightgrey\") +\n  labs(title = \"out-degree distribution observed network\", x = \"degree\") \n\nsim2_outdeg <- as.data.frame(sim2_outdeg)\np_sim2_outdeg <- ggplot(sim2_outdeg, aes(x=sim2_outdeg)) +\n  geom_bar(color=\"darkgrey\", fill=\"lightgrey\") +\n  labs(title = \"out-degree distribution random network\", x = \"degree\") \n\np_fall_outdeg + p_sim2_outdeg \n```\n\n::: {.cell-output-display}\n![](08-cugd_files/figure-html/unnamed-chunk-13-1.png){width=1920}\n:::\n:::\n\n\n**Q4:** If you interpret being nominated many times as 'being active', are there actors in the observed data more active than by pure chance?\n\n## Dyad census and triad census\n\nTabulate the number of dyads that do not have any ties, have exactly one tie, and that have two ties (i.e. are reciprocated or mutual dyads). We calculate these numbers for both the observed and the random network using `igraph`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndyad_census(fall_g) \ndyad_census(sim2_g)\n# using sna package with matrix objects instead\nsna::dyad.census(fall_mat) \nsna::dyad.census(sim2_mat)\n```\n:::\n\n\n**Q4:** Where do you note the strongest difference between the observed and simulated network?\n\nNow we do the same to compare the number of transitive triads. Using the `sna` function for calculating triad census might be easier since it also includes the triad labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntriad_census(fall_g) \ntriad_census(sim2_g)\n# using sna package with matrix objects instead\nsna::triad.census(fall_mat) \nsna::triad.census(sim2_mat)\n```\n:::\n\n\n**Q4:** Where do you note the strongest difference between the observed and simulated network in terms of transitivity?\n\nNote that the number of complete triads (MAN: 300) is 22 in the observed data and 0 for the random network. However, this might be an unfair comparison as the complete 300 triangle contains three reciprocated ties and we already saw that the Coleman data had a much higher number mutual dyads than the random network. But is this just a coincidence? To answer this we need to generate a **world of hypothetical networks** by generating many many random networks.\n\nTo see just how unusual mutual ties are in the alternative world, we can generate 1000 random networks while conditioning on the observed number of ties (the exact density):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim2.1000_mat <- rgnm(n = 1000, nv = dim(fall_mat)[1], m = sum(fall_mat), mode = \"digraph\")\nsim2.1000_dc <- as.data.frame(sna::dyad.census(sim2.1000_mat))\n```\n:::\n\n\nNow we can draw the histogram for the distribution of mutual dyads through:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_sim2.1000_dc <- ggplot(sim2.1000_dc, aes(x= Mut))  +\n  geom_histogram(binwidth = 1, color=\"darkgrey\", fill=\"lightgrey\") +\n  coord_cartesian(ylim=c(0,200)) +\n  labs(title = \"\", x = \"number of mutual ties\") \np_sim2.1000_dc\n```\n\n::: {.cell-output-display}\n![](08-cugd_files/figure-html/unnamed-chunk-17-1.png){width=480}\n:::\n:::\n\n\n**Q5:** Do any of the 1000 random networks have as large a number of mutual dyads as in the observed fall network?\n\n# Uniform graph distribution given dyad census: ${\\cal{U}}|\\textrm{MAN}$\n\nGenerate a new type of random graph, namely one that is random but has the exact same number of null, mutual and asymmetric dyads as the observed network:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim3_mat <- rguman(n = 1, nv = 73, mut = 62, asym = 119, null = 2447, method = \"exact\")\nsim3_g <- graph_from_adjacency_matrix(sim3_mat, \"directed\")\n```\n:::\n\n\nNow repeat the check of triad census:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntriad.census(fall_g) \ntriad.census(sim3_g)\n# using sna package with matrix objects instead\nsna::triad.census(fall_mat) \nsna::triad.census(sim3_mat)\n```\n:::\n\n\nAs seen from the results, this still did not manage to produce any complete 300 triangles. How do we interpret this? We can say that\n\n*\"had allocation of ties in the network been completely random given the 'dyadic processes', it would be unlikely that we would observe any complete triangles\"*\n\nCan we then say that there are more complete triangles than we expect by chance? Just how likely or unlikely is it to observe this many triangles? In order to answer this we again need to produce a **world of hypothetical networks**.\n\nWe generate 1000 random graphs from the null model (that is given the fixed dyad census we observed). We also calculate the triad census of the randomly generated graphs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim3.1000_mat <- rguman(n = 1000, nv = dim(fall_mat)[1], \n            mut = 62, asym = 119, null = 2447, method = \"exact\")\nsim3.1000_tc <- as.data.frame(sna::triad.census(sim3.1000_mat, mode = 'digraph'))\n```\n:::\n\n\nFinally, we plot the distribution of number of transitive triads (030T) under the null model, and include a red line showing where the observed number (23) falls in this distribution (you can tidy up the histogram if needed):\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_sim3.1000_tc <- ggplot(sim3.1000_tc, aes(x= `030T`))  +\n  geom_histogram(binwidth = 1, color=\"darkgrey\", fill=\"lightgrey\") +\n  geom_vline(xintercept = 23, lwd=0.5, colour=\"red\") +\n  coord_cartesian(ylim=c(0,200)) +\n  labs(title = \"\", x = \"number of 030T triads\")\np_sim3.1000_tc\n```\n\n::: {.cell-output-display}\n![](08-cugd_files/figure-html/unnamed-chunk-21-1.png){width=480}\n:::\n:::\n\n\n**Q7:** What can be concluded?\n\n# A homophily test: Lazega's lawyers\n\n## Data\n\nThis data set comes from a network study of corporate law partnership that was carried out in a Northeastern US corporate law firm. You can read about this data set [here](https://www.rdocumentation.org/packages/networkdata/versions/0.1.5/topics/law_cowork). We will go through two examples for testing homophily using this data set. Thus, the null and alternative hypotheses for both tests are: $H_0$: observed homophily effect is from $\\mathcal{U}|L$ model\n\n$H_1$: observed homophily effect is *not* from $\\mathcal{U}|L$ model\n\nbut we will use different relations and check for social selection based on different attributes.\n\n## Analysing homophily using non-parametric null distribution\n\n### Test 1: Friendship based on gender\n\nWe start with a simple homophily test: do lawyers befriend those with the same gender? To load the friendship network:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"law_friends\")\n```\n:::\n\n\nWe then create an adjacency matrix from the directed graph, calculate number of ties and nodes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaw_mat.frn <- as_adjacency_matrix(law_friends, sparse = FALSE)\nlaw_nodes <- dim(law_mat.frn)[1]\nlaw_ties.frn <- sum(law_mat.frn)\n```\n:::\n\n\nNext we save the binary attribute 'gender' from the loaded graph object as a vector, which we then convert into a data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaw_attr.gend <- as.data.frame(vertex_attr(law_cowork)$gender)\n```\n:::\n\n\nTo calculate the number of observed homophilous ties:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhomoph_obs.frn <- sum(law_mat.frn[law_attr.gend == 1, law_attr.gend == 1]) + \n              sum(law_mat.frn[law_attr.gend == 2, law_attr.gend == 2])\n```\n:::\n\n\nNext, generate 1000 random graphs with the same number of ties as the observed one, i.e. the null model ${\\cal{U}}|L$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaw_sim1000.frn <- rgnm(1000, law_nodes, law_ties.frn, mode='digraph')\n```\n:::\n\n\nFor each random network generated, calculate the number of homophilous ties in the same way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhomoph_sim.frn <- apply(law_sim1000.frn, 1, function(x) {\n                sum(x[law_attr.gend == 1,law_attr.gend == 1]) + \n                sum(x[law_attr.gend == 2, law_attr.gend == 2])})\n```\n:::\n\n\nTo plot the distribution of homophilous ties under the null hypothesis $H_0$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhomoph_sim.frn <- as.data.frame(homoph_sim.frn)\np_lawsim1000.frn <- ggplot(homoph_sim.frn, aes(x= homoph_sim.frn))  +\n  geom_histogram(binwidth = 5, color=\"darkgrey\", fill=\"lightgrey\") +\n  coord_cartesian(ylim=c(0,200)) +\n  labs(title = \"\", x = \"number of homophilious ties\")\np_lawsim1000.frn \n```\n\n::: {.cell-output-display}\n![](08-cugd_files/figure-html/unnamed-chunk-28-1.png){width=480}\n:::\n:::\n\n\n**Q8:** Can you reject the null? Why or why not?\n\n### Test 1: Cowork based on law practice\n\nWe want to check whether or not the *partners* of the firm more frequently work together with other partners having the same practice. We import the data as a graph object from the `networkdata` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"law_cowork\")\n```\n:::\n\n\nWe then create an adjacency matrix from the directed graph for the first 36 lawyers in the network corresponding to the partners of the firm (see attribute 'status'). To test homophily now, we only consider the reciprocal ties so we need to symmetrize the matrix to create and undirected graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaw_mat_cwdir <- as_adjacency_matrix(law_cowork, sparse = FALSE)\nlaw_mat_cwdir <- law_mat_cwdir[1:36,1:36]\nlaw_mat_cw <- (law_mat_cwdir == t(law_mat_cwdir) & law_mat_cwdir ==1) + 0\nlaw_nodes_cw <- dim(law_mat_cw)[1]\nlaw_ties_cw <- sum(law_mat_cw)/2\n```\n:::\n\n\nNext we save the binary attribute 'practice' (1 = litigation, 2 = corporate) from the graph object as a vector, which is then in turn converted into a data frame (again only for the first 36 lawyers who are partners):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaw_attr.pract <- as.data.frame(vertex_attr(law_cowork)$pract[1:36])\n```\n:::\n\n\nTo calculate the number of observed homophilous ties:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhomoph_obs.cw <- sum(\n  law_mat_cw[law_attr.pract == 1, law_attr.pract == 1])/2 + \n  sum(law_mat_cw[law_attr.pract == 2, law_attr.pract == 2])/2\nhomoph_obs.cw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 72\n```\n\n\n:::\n:::\n\n\nNext, generate 1000 random graphs with the same number of ties as the observed one, i.e. the null model ${\\cal{U}}|L$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(7722) # so that we all get the same results\nlaw_sim1000.cw <- rgnm(1000, law_nodes_cw, law_ties_cw, mode='graph')\n```\n:::\n\n\nFor each random network generated, calculate the number of homophilous ties in the same way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhomoph_sim.cw <- apply(law_sim1000.cw, 1, function(x) {\n                sum(x[law_attr.pract == 1,law_attr.pract == 1])/2 + \n                sum(x[law_attr.pract == 2, law_attr.pract == 2])/2})\n```\n:::\n\n\nThe distribution of homophilous ties under the null hypothesis $H_0$ is plotted below with a red line indicating where the observed value falls in this distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhomoph_sim.cw <- as.data.frame(homoph_sim.cw)\np_lawsim1000.cw <- ggplot(homoph_sim.cw , aes(x= homoph_sim.cw))  +\n  geom_histogram(binwidth = 1, color=\"darkgrey\", fill=\"lightgrey\") +\n  coord_cartesian(ylim=c(0,100)) +\n  geom_vline(xintercept = homoph_obs.cw, lwd=0.5, colour=\"red\") +\n  labs(title = \"\", x = \"number of homophilious ties\")\np_lawsim1000.cw\n```\n\n::: {.cell-output-display}\n![](08-cugd_files/figure-html/unnamed-chunk-35-1.png){width=480}\n:::\n:::\n\n\n**Q9:** Can you reject the null? Why or why not? We can also calculate the $p$-value for this test. Thus, you can use this distribution to calculate probability $P(\\text{test statistic} > \\textrm{ observed value } |H_0 \\textrm{ true })$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(homoph_sim.cw  > homoph_obs.cw)/1000\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.002\n```\n\n\n:::\n:::\n\n\n**Q10:** How do you interpret this value?\n\n# Exercises\n\n**Exercise 1:** Compare the in-degree distribution (interpreted as 'popularity') of the students in the observed Coleman network to one generated random network given expected density. Can you note major differences between the two?\n\n**Exercise 2:** Generate 1000 random networks given number of edges to test reciprocity and transitivity effects in the Coleman spring network. Given these effects, can you detect a change from the fall to spring network?\n\n**Exercise 3:** Repeat the homophily test of friendship relation given gender in the lawyer data set, but assume the null model is $\\mathcal{U}|\\textrm{MAN}$ instead. What can you conclude?\n\n**Exercise 4:** Use the third type of relation in the lawyer data set 'advice' and test for homophily using your attribute of choice. Assume the null model is $\\mathcal{U}|L$ model. What can you conclude?\n",
    "supporting": [
      "08-cugd_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}