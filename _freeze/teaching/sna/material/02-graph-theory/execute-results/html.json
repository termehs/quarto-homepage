{
  "hash": "bfd5ac97314a0c5e222424bb6ac41135",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor:  Termeh Shafie\ntitle: \"Social Network Analysis\"\nsubtitle: \"Worksheet 2: Graph Theory\"\nlightbox: auto\ntoc: true\nformat:\n  html:\n    embed-resources: true\n    fig-width: 10\n    fig-height: 10\n---\n\n\n## Graph Theory in R with `igraph`\n\nWe'll use the `igraph` package to explore key graph-theoretical concepts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n:::\n\n\n## Undirected Graph\n\nWe'll use an undirected graph with 8 nodes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- graph_from_literal(\n  1 -- 2, \n  1 -- 3,\n  2 -- 4,\n  3 -- 5,\n  4 -- 5,\n  5 -- 6,\n  6 -- 7,\n  6 -- 8,\n  7 -- 8\n)\n\nplot(g, vertex.label.cex = 1.2, vertex.size = 20)\n```\n\n::: {.cell-output-display}\n![](02-graph-theory_files/figure-html/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n###  Degree & Degree Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeg <- degree(g)\ndeg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1 2 3 4 5 6 7 8 \n2 2 2 2 3 3 2 2 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Degree distribution\ndist <- degree_distribution(g)\nplot(dist, type = \"h\", main = \"Degree Distribution\", xlab = \"Degree\", ylab = \"Frequency\")\n```\n\n::: {.cell-output-display}\n![](02-graph-theory_files/figure-html/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\nIdentify nodes with the highest and lowest degree. How does the distribution look?\n\n------------------------------------------------------------------------\n\n\n### Graph Diameter\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiameter(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nWhat is the longest shortest path in the graph?\n\n------------------------------------------------------------------------\n\n### Shortest Paths\n\nFind shortest paths from node 1 to all others:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp <- distances(g, v = 1)\nsp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  1 2 3 4 5 6 7 8\n1 0 1 1 2 2 3 4 4\n```\n\n\n:::\n:::\n\n\n Do you understand the output? What is the shortest path from node 1 to node 6?\n\n------------------------------------------------------------------------\n\n\n### Adjacency Matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadj_matrix <- as_adjacency_matrix(g, sparse = FALSE)\nadj_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  1 2 3 4 5 6 7 8\n1 0 1 1 0 0 0 0 0\n2 1 0 0 1 0 0 0 0\n3 1 0 0 0 1 0 0 0\n4 0 1 0 0 1 0 0 0\n5 0 0 1 1 0 1 0 0\n6 0 0 0 0 1 0 1 1\n7 0 0 0 0 0 1 0 1\n8 0 0 0 0 0 1 1 0\n```\n\n\n:::\n:::\n\n\nUse the adjacency matrix to compute the degree of each node. Compare with `degree(g)`.\n\n------------------------------------------------------------------------\n\n\n### Cutpoints (Articulation Points)\n\n\n::: {.cell}\n\n```{.r .cell-code}\narticulation_points <- articulation_points(g)\narticulation_points\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n+ 2/8 vertices, named, from a893d7d:\n[1] 6 5\n```\n\n\n:::\n:::\n\n\n### Bridges (Critical Edges)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbridge_edges <- which(is.na(edge_connectivity(g)))\nE(g)[bridge_edges]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n+ 0/9 edges from a893d7d (vertex names):\n```\n\n\n:::\n\n```{.r .cell-code}\n# Alternatively use:\nbridges(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n+ 1/9 edge from a893d7d (vertex names):\n[1] 5--6\n```\n\n\n:::\n:::\n\n\n### Visualize Cutpoints and Bridges\n\n\n::: {.cell}\n\n```{.r .cell-code}\nV(g)$color <- ifelse(V(g) %in% articulation_points, \"red\", \"skyblue\")\nE(g)$color <- ifelse(E(g) %in% bridges(g), \"red\", \"black\")\n\nplot(g, vertex.size = 20, vertex.label.cex = 1.2)\n```\n\n::: {.cell-output-display}\n![](02-graph-theory_files/figure-html/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n Which nodes and edges are critical to keeping the graph connected?\n\n------------------------------------------------------------------------\n\n## Directed Graph\n\nNow letâ€™s work with a **directed graph**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_dir <- graph_from_literal(\n  A -+ B, A -+ C,\n  B -+ D,\n  C -+ D,\n  D -+ E,\n  E -+ F,\n  F -+ C\n)\n\nplot(g_dir, vertex.label.cex = 1.2, vertex.color = \"lightcoral\", edge.arrow.size = 0.5)\n```\n\n::: {.cell-output-display}\n![](02-graph-theory_files/figure-html/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n\n### In-Degree and Out-Degree\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndegree(g_dir, mode = \"in\")   # incoming links\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nA B C D E F \n0 1 2 2 1 1 \n```\n\n\n:::\n\n```{.r .cell-code}\ndegree(g_dir, mode = \"out\")  # outgoing links\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nA B C D E F \n2 1 1 1 1 1 \n```\n\n\n:::\n:::\n\n\n### Strongly Connected Components\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomponents(g_dir, mode = \"strong\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$membership\nA B C D E F \n1 2 3 3 3 3 \n\n$csize\n[1] 1 1 4\n\n$no\n[1] 3\n```\n\n\n:::\n:::\n\n\n### Directed Paths and Diameter\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiameter(g_dir, directed = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nExplore how cycles and direction affect path lengths.\n\n------------------------------------------------------------------------\n\n\n## Exercises\n\n- Create some other small unidrected and directed graphs and see how the above measure vary on them\n\n- import the Florentine marriage and business network from the `networkdata` package and compute the appropriate measures from above on it\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(networkdata)\ndata(\"flo_marriage\")\ndata(\"flo_business\")\n```\n:::\n",
    "supporting": [
      "02-graph-theory_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}