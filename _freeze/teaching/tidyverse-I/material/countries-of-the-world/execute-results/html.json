{
  "hash": "49b3c77b6cd760438362e1175c560f38",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Countries of the world\"\nauthor: \"Termeh Shafie\"\nformat:\n  html:\n    embed-resources: true\neditor: visual\nexecute:\n  cache:  true\n---\n\n\n\n![](img/world.png)\n\nIn order to complete this assignment you will need a Chrome browser with the [Selector Gadget extension](http://selectorgadget.com/) installed.\n\nThis [website](https://scrapethissite.com/pages/simple/)  lists the names of 250 countries, as well as their flag, capital, population and size in square kilometres. Our goal could be to read this information into R for each country so that we can potentially analyse it further.\n\nBefore we start, we should load the required packages (we will also need the tidyverse package this time) and read the website with the function `read_html()` and assign it to an R object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(DT)\n\npage <- read_html(\"https://scrapethissite.com/pages/simple/\")\n```\n:::\n\n\n\n## Country names\nUse the Selector Gadget to identify the CSS selectors needed to extract country names. \n\n::: {.cell}\n\n```{.r .cell-code}\ncountry <- page %>%\n  html_elements(\".country-name\") %>%\n  html_text(trim = TRUE) \n\nhead(country)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Andorra\"              \"United Arab Emirates\" \"Afghanistan\"         \n[4] \"Antigua and Barbuda\"  \"Anguilla\"             \"Albania\"             \n```\n\n\n:::\n:::\n\n\n\n## Capitals, population and area\nLet us now turn to the further information for each country. Again use the selector gadget to identify the CSS selector needed which in this case is `.country-info`:\n\n::: {.cell}\n\n```{.r .cell-code}\npage %>%\n  html_elements(\".country-info\") %>%\n  html_text(trim = TRUE) %>% \n  head(n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Capital: Andorra la VellaPopulation: 84000Area (km2): 468.0\"   \n [2] \"Capital: Abu DhabiPopulation: 4975593Area (km2): 82880.0\"      \n [3] \"Capital: KabulPopulation: 29121286Area (km2): 647500.0\"        \n [4] \"Capital: St. John'sPopulation: 86754Area (km2): 443.0\"         \n [5] \"Capital: The ValleyPopulation: 13254Area (km2): 102.0\"         \n [6] \"Capital: TiranaPopulation: 2986952Area (km2): 28748.0\"         \n [7] \"Capital: YerevanPopulation: 2968000Area (km2): 29800.0\"        \n [8] \"Capital: LuandaPopulation: 13068161Area (km2): 1246700.0\"      \n [9] \"Capital: NonePopulation: 0Area (km2): 1.4E7\"                   \n[10] \"Capital: Buenos AiresPopulation: 41343201Area (km2): 2766890.0\"\n```\n\n\n:::\n:::\n\n\nSo we get the names of the capitals, but also the population and the size of the country. The selector was not specific enough and we have to tell `html_elements()` more precisely which of these we are interested in. These CSS selectors differ between the three countries’ information:\n\n1. The selector `country-capital` gives us the capital of the countries:\n\n::: {.cell}\n\n```{.r .cell-code}\ncapital <- page %>%\n  html_elements(\".country-capital\") %>%\n  html_text(trim = TRUE) \n\nhead(capital)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Andorra la Vella\" \"Abu Dhabi\"        \"Kabul\"            \"St. John's\"      \n[5] \"The Valley\"       \"Tirana\"          \n```\n\n\n:::\n:::\n\n\n2. The selector `country-population` gives us the population of the countries:\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation <-  page %>%\n  html_elements(\".country-population\") %>%\n  html_text() %>% \n  as.numeric()\nhead(population)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]    84000  4975593 29121286    86754    13254  2986952\n```\n\n\n:::\n:::\n\n\n3. The selector `country-area` gives us the area of the countries:\n\n::: {.cell}\n\n```{.r .cell-code}\narea <-  page %>%\n  html_elements(\".country-area\") %>%\n  html_text() %>% \n  as.numeric()\nhead(area)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]    468  82880 647500    443    102  28748\n```\n\n\n:::\n:::\n\n\nNote that we need to tell R to interpret the “text” read from the HTML code as numbers using the function `as.numeric()`.\n\n## Merge into one tibble\nWe could already continue working with this, but for many applications it is more practical if we combine the data in a vertical form:\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <- tibble(\n  country = country,\n  capital = capital,\n  population = population,\n  area = area\n)\ncountries\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 250 × 4\n   country              capital          population     area\n   <chr>                <chr>                 <dbl>    <dbl>\n 1 Andorra              Andorra la Vella      84000      468\n 2 United Arab Emirates Abu Dhabi           4975593    82880\n 3 Afghanistan          Kabul              29121286   647500\n 4 Antigua and Barbuda  St. John's            86754      443\n 5 Anguilla             The Valley            13254      102\n 6 Albania              Tirana              2986952    28748\n 7 Armenia              Yerevan             2968000    29800\n 8 Angola               Luanda             13068161  1246700\n 9 Antarctica           None                      0 14000000\n10 Argentina            Buenos Aires       41343201  2766890\n# ℹ 240 more rows\n```\n\n\n:::\n:::\n\n\n## All in one step\n\nIf we are sure that we do not need the individual vectors, we can also perform the reading of the data and the creation of the tibble in a single step. Below you can see how the complete scraping process can be completed in relatively few lines.\n\n::: {.cell}\n\n```{.r .cell-code}\npage <- \"https://scrapethissite.com/pages/simple/\" %>%\n  read_html()\n\ncountries_2 <- tibble(\n  Land = page %>%\n    html_elements(css = \".country-name\") %>% \n    html_text(trim = TRUE),\n  capital = page %>% \n    html_elements(css = \".country-capital\") %>% \n    html_text(),\n  population = page %>% \n    html_elements(css = \".country-population\") %>% \n    html_text() %>% \n    as.numeric(),\n  area = page %>% \n    html_elements(css = \".country-area\") %>% \n    html_text() %>% \n    as.numeric()\n)\n\ncountries_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 250 × 4\n   Land                 capital          population     area\n   <chr>                <chr>                 <dbl>    <dbl>\n 1 Andorra              Andorra la Vella      84000      468\n 2 United Arab Emirates Abu Dhabi           4975593    82880\n 3 Afghanistan          Kabul              29121286   647500\n 4 Antigua and Barbuda  St. John's            86754      443\n 5 Anguilla             The Valley            13254      102\n 6 Albania              Tirana              2986952    28748\n 7 Armenia              Yerevan             2968000    29800\n 8 Angola               Luanda             13068161  1246700\n 9 Antarctica           None                      0 14000000\n10 Argentina            Buenos Aires       41343201  2766890\n# ℹ 240 more rows\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}