{
  "hash": "a73f4ee8ece388cf3b01cfb9b2da338b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Worksheet 4 - Tuning models\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Setup\n\nSetup from previous worksheet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ broom        1.0.7     ✔ recipes      1.2.0\n✔ dials        1.4.0     ✔ rsample      1.2.1\n✔ dplyr        1.1.4     ✔ tibble       3.2.1\n✔ ggplot2      3.5.1     ✔ tidyr        1.3.1\n✔ infer        1.0.7     ✔ tune         1.3.0\n✔ modeldata    1.4.0     ✔ workflows    1.2.0\n✔ parsnip      1.3.1     ✔ workflowsets 1.1.0\n✔ purrr        1.0.4     ✔ yardstick    1.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(forested)\n\nset.seed(123)\nforested_split <- initial_split(forested, prop = 0.8)\nforested_train <- training(forested_split)\nforested_test <- testing(forested_split)\n\nset.seed(123)\nforested_folds <- vfold_cv(forested_train, v = 10)\n```\n:::\n\n\n## Tag parameters for tuning\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- rand_forest(min_n = tune()) %>% \n  set_mode(\"classification\")\n\nrf_wflow <- workflow(forested ~ ., rf_spec)\nrf_wflow\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Formula\nModel: rand_forest()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\nforested ~ .\n\n── Model ───────────────────────────────────────────────────────────────────────\nRandom Forest Model Specification (classification)\n\nMain Arguments:\n  min_n = tune()\n\nComputational engine: ranger \n```\n\n\n:::\n:::\n\n\n## Grid search\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(22)\nrf_res <- tune_grid(\n  rf_wflow,\n  forested_folds,\n  grid = 5\n)\n```\n:::\n\n\n## Compare results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(rf_res)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in show_best(rf_res): No value of `metric` was given; \"roc_auc\" will be\nused.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 7\n  min_n .metric .estimator  mean     n std_err .config             \n  <int> <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n1    31 roc_auc binary     0.972    10 0.00304 Preprocessor1_Model2\n2    12 roc_auc binary     0.972    10 0.00317 Preprocessor1_Model4\n3    22 roc_auc binary     0.972    10 0.00313 Preprocessor1_Model5\n4    40 roc_auc binary     0.972    10 0.00303 Preprocessor1_Model1\n5     3 roc_auc binary     0.971    10 0.00306 Preprocessor1_Model3\n```\n\n\n:::\n\n```{.r .cell-code}\nbest_parameter <- select_best(rf_res)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in select_best(rf_res): No value of `metric` was given; \"roc_auc\" will\nbe used.\n```\n\n\n:::\n\n```{.r .cell-code}\nbest_parameter\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  min_n .config             \n  <int> <chr>               \n1    31 Preprocessor1_Model2\n```\n\n\n:::\n:::\n\n\n## The final fit\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_wflow <- finalize_workflow(rf_wflow, best_parameter)\n\nfinal_fit <- last_fit(rf_wflow, forested_split) \n\ncollect_metrics(final_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  .metric     .estimator .estimate .config             \n  <chr>       <chr>          <dbl> <chr>               \n1 accuracy    binary        0.909  Preprocessor1_Model1\n2 roc_auc     binary        0.970  Preprocessor1_Model1\n3 brier_class binary        0.0659 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n## Your turn\n\nModify your model workflow to tune one or more parameters.\n\nUse grid search to find the best parameter(s).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Your code here!\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}