{
  "hash": "e5f78bbdc50189a6061a991dc739bea4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Worksheet 2 - What makes a model?\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Setup\n\nSetup from previous worksheet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ broom        1.0.7     ✔ recipes      1.2.0\n✔ dials        1.4.0     ✔ rsample      1.2.1\n✔ dplyr        1.1.4     ✔ tibble       3.2.1\n✔ ggplot2      3.5.1     ✔ tidyr        1.3.1\n✔ infer        1.0.7     ✔ tune         1.3.0\n✔ modeldata    1.4.0     ✔ workflows    1.2.0\n✔ parsnip      1.3.1     ✔ workflowsets 1.1.0\n✔ purrr        1.0.4     ✔ yardstick    1.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(forested)\n\nset.seed(123)\nforested_split <- initial_split(forested, prop = 0.8)\nforested_train <- training(forested_split)\nforested_test <- testing(forested_split)\n```\n:::\n\n\n## Your turn\n\nHow do you fit a linear model in R?\n\nHow many different ways can you think of?\n\nDiscuss with your neighbor!\n\n## To specify a model\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model\nlinear_reg()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n\n\n:::\n\n```{.r .cell-code}\n# Engine\nlinear_reg() %>%\n  set_engine(\"glmnet\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: glmnet \n```\n\n\n:::\n\n```{.r .cell-code}\n# Mode - Some models have a default mode, others don't\ndecision_tree() %>% \n  set_mode(\"regression\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDecision Tree Model Specification (regression)\n\nComputational engine: rpart \n```\n\n\n:::\n:::\n\n\n## Your turn\n\nEdit the chunk below to use a logistic regression model.\n\nExtension/Challenge: Edit this code to use a different model. For example, try using a conditional inference tree as implemented in the partykit package by changing the engine - or try an entirely different model type!\n\nAll available models are listed at <https://www.tidymodels.org/find/parsnip/>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec <- decision_tree() %>% \n  set_mode(\"classification\")\n\ntree_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDecision Tree Model Specification (classification)\n\nComputational engine: rpart \n```\n\n\n:::\n:::\n\n\n## A model workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec <-\n  decision_tree() %>% \n  set_mode(\"classification\")\n```\n:::\n\n\nFit parsnip specification:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec %>% \n  fit(forested ~ ., data = forested_train) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\nn= 5685 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n 1) root 5685 2550 Yes (0.55145119 0.44854881)  \n   2) land_type=Tree 3064  300 Yes (0.90208877 0.09791123) *\n   3) land_type=Barren,Non-tree vegetation 2621  371 No (0.14154903 0.85845097)  \n     6) temp_annual_max< 13.395 347  153 Yes (0.55907781 0.44092219)  \n      12) tree_no_tree=Tree 92    6 Yes (0.93478261 0.06521739) *\n      13) tree_no_tree=No tree 255  108 No (0.42352941 0.57647059) *\n     7) temp_annual_max>=13.395 2274  177 No (0.07783641 0.92216359) *\n```\n\n\n:::\n:::\n\n\nFit with a workflow:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkflow() %>%\n  add_formula(forested ~ .) %>%\n  add_model(tree_spec) %>%\n  fit(data = forested_train) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Formula\nModel: decision_tree()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\nforested ~ .\n\n── Model ───────────────────────────────────────────────────────────────────────\nn= 5685 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n 1) root 5685 2550 Yes (0.55145119 0.44854881)  \n   2) land_type=Tree 3064  300 Yes (0.90208877 0.09791123) *\n   3) land_type=Barren,Non-tree vegetation 2621  371 No (0.14154903 0.85845097)  \n     6) temp_annual_max< 13.395 347  153 Yes (0.55907781 0.44092219)  \n      12) tree_no_tree=Tree 92    6 Yes (0.93478261 0.06521739) *\n      13) tree_no_tree=No tree 255  108 No (0.42352941 0.57647059) *\n     7) temp_annual_max>=13.395 2274  177 No (0.07783641 0.92216359) *\n```\n\n\n:::\n:::\n\n\n\"Shortcut\" by specifying the preprocessor and model spec directly in the `workflow()` call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkflow(forested ~ ., tree_spec) %>% \n  fit(data = forested_train) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Formula\nModel: decision_tree()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\nforested ~ .\n\n── Model ───────────────────────────────────────────────────────────────────────\nn= 5685 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n 1) root 5685 2550 Yes (0.55145119 0.44854881)  \n   2) land_type=Tree 3064  300 Yes (0.90208877 0.09791123) *\n   3) land_type=Barren,Non-tree vegetation 2621  371 No (0.14154903 0.85845097)  \n     6) temp_annual_max< 13.395 347  153 Yes (0.55907781 0.44092219)  \n      12) tree_no_tree=Tree 92    6 Yes (0.93478261 0.06521739) *\n      13) tree_no_tree=No tree 255  108 No (0.42352941 0.57647059) *\n     7) temp_annual_max>=13.395 2274  177 No (0.07783641 0.92216359) *\n```\n\n\n:::\n:::\n\n\n## Your turn\n\nEdit the chunk below to make a workflow with your own model of choice!\n\nExtension/Challenge: Other than formulas, what kinds of preprocessors are supported?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec <-\n  decision_tree() %>% \n  set_mode(\"classification\")\n\ntree_wflow <- workflow() %>%\n  add_formula(forested ~ .) %>%\n  add_model(tree_spec)\n\ntree_wflow\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Formula\nModel: decision_tree()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\nforested ~ .\n\n── Model ───────────────────────────────────────────────────────────────────────\nDecision Tree Model Specification (classification)\n\nComputational engine: rpart \n```\n\n\n:::\n:::\n\n\n## Predict with your model\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_fit <-\n  workflow(forested ~ ., tree_spec) %>% \n  fit(data = forested_train) \n```\n:::\n\n\n## Your turn\n\nRun:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(tree_fit, new_data = forested_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,422 × 1\n   .pred_class\n   <fct>      \n 1 Yes        \n 2 Yes        \n 3 No         \n 4 No         \n 5 No         \n 6 Yes        \n 7 Yes        \n 8 Yes        \n 9 Yes        \n10 Yes        \n# ℹ 1,412 more rows\n```\n\n\n:::\n:::\n\n\nWhat do you notice about the structure of the result?\n\n## Your turn\n\nRun:\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(tree_fit, new_data = forested_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,422 × 22\n   .pred_class .pred_Yes .pred_No forested  year elevation eastness northness\n   <fct>           <dbl>    <dbl> <fct>    <dbl>     <dbl>    <dbl>     <dbl>\n 1 Yes            0.902    0.0979 No        2005       164      -84        53\n 2 Yes            0.902    0.0979 Yes       2005       299       93        34\n 3 No             0.0778   0.922  Yes       2005       636      -48        87\n 4 No             0.0778   0.922  Yes       2005       224      -65       -75\n 5 No             0.424    0.576  Yes       2005      2240      -67       -74\n 6 Yes            0.902    0.0979 Yes       2004      1044       96       -26\n 7 Yes            0.902    0.0979 Yes       2003      1031      -49        86\n 8 Yes            0.902    0.0979 Yes       2005      1330       99         7\n 9 Yes            0.902    0.0979 Yes       2005      1423       46        88\n10 Yes            0.902    0.0979 Yes       2014       546      -92       -38\n# ℹ 1,412 more rows\n# ℹ 14 more variables: roughness <dbl>, tree_no_tree <fct>, dew_temp <dbl>,\n#   precip_annual <dbl>, temp_annual_mean <dbl>, temp_annual_min <dbl>,\n#   temp_annual_max <dbl>, temp_january_min <dbl>, vapor_min <dbl>,\n#   vapor_max <dbl>, canopy_cover <dbl>, lon <dbl>, lat <dbl>, land_type <fct>\n```\n\n\n:::\n:::\n\n\nHow does the output compare to the output from `predict()`?\n\n## Understand your model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rpart.plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: rpart\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'rpart'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dials':\n\n    prune\n```\n\n\n:::\n\n```{.r .cell-code}\ntree_fit %>%\n  extract_fit_engine() %>%\n  rpart.plot(roundint = FALSE)\n```\n\n::: {.cell-output-display}\n![](2-what-makes-a-model_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Your turn\n\nTry extracting the model engine object from your fitted workflow!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Your code here\n```\n:::\n\n\nWhat kind of object is it? What can you do with it?\n\n⚠️ Never `predict()` with any extracted components!\n\nYou can also read the documentation for object extraction:\nhttps://workflows.tidymodels.org/reference/extract-workflow.html\n\n",
    "supporting": [
      "2-what-makes-a-model_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}