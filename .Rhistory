)
modnn <- modnn %>%
setup(
loss = nn_mse_loss(),
optimizer = optim_rmsprop,
metrics = list(luz_metric_mae())
) %>%
set_hparams(input_size = ncol(x))
fitted <- modnn %>%
fit(
data = list(x[-testid, ], matrix(y[-testid], ncol = 1)),
valid_data = list(x[testid, ], matrix(y[testid], ncol = 1)),
epochs = 30 # 50
)
install.packages("jsonlite")
library(jsonlite)
library(ggplot2)
library(tidyverse)
library(dbscan)
library(mclust)
library(randomForest)
setwd("~/Dropbox/ts/uni_konstanz/2023/teaching/statistical-learning/wise-24-25/course-material/practicals/13-pca")
library(readr)
penguins = read_csv("penguins.csv", col_names = T)
head(penguins)
tail(penguins)
dim(penguins)
df <- na.omit(penguins)
dim(df)
reduced_df <-  cbind(df$bill_length_mm, df$bill_depth_mm, df$flipper_length_mm, df$body_mass_g, df$species)
colnames(reduced_df) <- c("bill_L", "bill_D", "flipper", "body", "species")
library(tidyverse)
library(ggfortify)
pca_values <-  prcomp(reduced_df, center = TRUE, scale = TRUE)
reduced_df
install.packages("skimr")
install.packages("nycflights13")
install.packages("maps")
library(tidymodels)
install.packages("emo")
devtools::install_github("hadley/emo")
install.packages("devtools")
devtools::install_github("hadley/emo")
ls
cd ..
setwd("~/Documents/GitHub/quarto-homepage")
#| label: load-packages
#| include: false
library(tidyverse)
library(tidyverse)
laquinta <- read_csv("data/laquinta.csv")
dennys <- read_csv("data/dennys.csv")
states <- read_csv("data/states.csv")
nrow(dennys)  # Number of rows
ncol(dennys)  # Number of columns
colnames(dennys)
colnames(dennys)
colnames(laquinta)
dennys %>%
filter(!(state %in% states$abbreviation))
# exercise 3-5
states <- states %>% rename(state = abbreviation)
laquinta %>% anti_join(states, by = "state")
laquinta2 <- laquinta %>% anti_join(states, by = "state")
dennys %>%
mutate(country = "United States")
# 7 + 8
laquinta2 %>% distinct(state)
# fill int the rest by yourself
laquinta %>%
mutate(country = case_when(
state %in% state.abb     ~ "United States",
state %in% c("ON", "BC") ~ "Canada",
state == "ANT"           ~ "Colombia" #new lines for new cases
))
#| eval: true
laquinta <- laquinta %>%
filter(country == "United States")
laquinta %>%
mutate(country = case_when(
state %in% state.abb     ~ "United States",
state %in% c("ON", "BC") ~ "Canada",
state == "ANT"           ~ "Colombia" #new lines for new cases
))
# 7 + 8
laquinta2 %>% distinct(state)
# fill int the rest by yourself
laquinta <-  laquinta %>%
mutate(country = case_when(
state %in% state.abb     ~ "United States",
state %in% c("ON", "BC") ~ "Canada",
state == "ANT"           ~ "Colombia" #new lines for new cases
))
laquinta <- laquinta %>%
filter(country == "United States")
tab_laquinta <- laquinta %>%
group_by(state) %>%
count() %>%
arrange(desc(n))
tab_laquinta
tail(tab_laquinta)
dennys %>%
count(state) %>%
inner_join(states, by = c("state" = "abbreviation"))
dennys
state
states
dennys %>%
count(state) %>%
inner_join(states, by = c("state"))
dennys <- dennys %>%
mutate(establishment = "Denny's")
laquinta <- laquinta %>%
mutate(establishment = "La Quinta")
dn_lq <- bind_rows(dennys, laquinta)
ggplot(dn_lq, mapping = aes(x = longitude, y = latitude, color = establishment)) +
geom_point()
dn_lq_ak_mindist <- dn_lq_ak %>%
group_by(address.x) %>%
summarise(closest = min(distance))
haversine <- function(long1, lat1, long2, lat2, round = 3) {
# convert to radians
long1 = long1 * pi / 180
lat1  = lat1  * pi / 180
long2 = long2 * pi / 180
lat2  = lat2  * pi / 180
R = 6371 # Earth mean radius in km
a = sin((lat2 - lat1)/2)^2 + cos(lat1) * cos(lat2) * sin((long2 - long1)/2)^2
d = R * 2 * asin(sqrt(a))
return( round(d,round) ) # distance in km
}
dn_lq_ak_mindist <- dn_lq_ak %>%
group_by(address.x) %>%
summarise(closest = min(distance))
dn_lq_ak <- full_join(dn_ak, lq_ak, by = "state")
dn_ak <- dennys %>%
filter(state == "AK")
nrow(dn_ak)
lq_ak <- laquinta %>%
filter(state == "AK")
nrow(lq_ak)
dn_lq_ak <- full_join(dn_ak, lq_ak, by = "state")
dn_lq_ak
haversine <- function(long1, lat1, long2, lat2, round = 3) {
# convert to radians
long1 = long1 * pi / 180
lat1  = lat1  * pi / 180
long2 = long2 * pi / 180
lat2  = lat2  * pi / 180
R = 6371 # Earth mean radius in km
a = sin((lat2 - lat1)/2)^2 + cos(lat1) * cos(lat2) * sin((long2 - long1)/2)^2
d = R * 2 * asin(sqrt(a))
return( round(d,round) ) # distance in km
}
dn_lq_ak_mindist <- dn_lq_ak %>%
group_by(address.x) %>%
summarise(closest = min(distance))
dn_lq_ak_mindist <- dn_lq_ak %>%
group_by(address.x) %>%
summarise(closest = min(distance))
dn_lq_ak <- dn_lq_ak %>%
mutate(distance = haversine(longitude.x, latitude.x, longitude.y, latitude.y))
dn_lq_ak_mindist <- dn_lq_ak %>%
group_by(address.x) %>%
summarise(closest = min(distance))
dn_lq_ak_mindist <- dn_lq_ak %>%
group_by(address.x) %>%
summarise(closest = min(distance))
dn_lq_ak_mindist
install.packages("dsbox")
devtools::install_github("tidyverse/dsbox")
#| label: plot
#| fig-width: 10
hotels %>%
group_by(hotel, arrival_date_month) %>%   # group by hotel type and arrival month
summarise(mean_adr = mean(adr)) %>%       # calculate mean adr for each group
ggplot(aes(
x = arrival_date_month,                 # x-axis = arrival_date_month
y = mean_adr,                           # y-axis = mean_adr calculated above
group = hotel,                          # group lines by hotel type
color = hotel)                          # and color by hotel type
) +
geom_line() +                             # use lines to represent data
theme_minimal() +                         # use a minimal theme
labs(
x = "Arrival month",                 # customize labels
y = "Mean ADR (average daily rate)",
title = "Comparison of resort and city hotel prices across months",
subtitle = "Resort hotel prices soar in the summer while ciry hotel prices remain relatively constant throughout the year",
color = "Hotel type"
)
?case_when
library(tidyverse)
library(nycflights13)
data(package = "nycflights13")
filter(flights, dest == "IAH" | dest == "HOU")
# or
filter(flights, dest %in% c("IAH", "HOU")) %>%
select(dest)
filter(flights, arr_delay >= 120)
filter(flights, carrier %in% c("AA", "DL", "UA"))
filter(flights, carrier %in% c("AA", "DL", "UA"))
filter(flights, month %in% 7:9)
# or
filter(flights, month == 7 | month == 8 | month == 9)
# or
filter(flights, between(month, 7, 9))
filter(flights, arr_delay > 120, dep_delay <= 0)
filter(flights, dep_delay >= 60, dep_delay - arr_delay > 30)
summary(flights$dep_time)
filter(flights, dep_time <= 600 | dep_time == 2400)
arrange(flights, dep_time) %>%
tail()
# Using desc() does not change that
arrange(flights, desc(dep_time))
# add an indicator of whether the column has a missing value
arrange(flights, desc(is.na(dep_time)), dep_time)
arrange(flights, desc(dep_delay))
# the earliest departing flight can be found by sorting dep_delay in ascending order.
arrange(flights, dep_delay)
head(arrange(flights, air_time))
# the highest average ground speed.
head(arrange(flights, desc(distance / air_time))) %>%
select(distance, air_time)
# air_time = arr_time - dep_time
flights_airtime <-
mutate(flights,
dep_time = (dep_time %/% 100 * 60 + dep_time %% 100) %% 1440,
arr_time = (arr_time %/% 100 * 60 + arr_time %% 100) %% 1440,
air_time_diff = air_time - arr_time + dep_time
)
# does air_time = arr_time - dep_time?
nrow(filter(flights_airtime, air_time_diff != 0))
flights_latlon <- flights %>%
inner_join(select(airports, origin = faa, origin_lat = lat, origin_lon = lon),
by = "origin"
) %>%
inner_join(select(airports, dest = faa, dest_lat = lat, dest_lon = lon),
by = "dest"
)
flights_latlon <- flights %>%
inner_join(select(airports, origin = faa, origin_lat = lat, origin_lon = lon),
by = "origin"
) %>%
inner_join(select(airports, dest = faa, dest_lat = lat, dest_lon = lon),
by = "dest"
)
head(flights_latlon)
flights_latlon %>%
slice(1:100) %>%
ggplot(aes(
x = origin_lon, xend = dest_lon,
y = origin_lat, yend = dest_lat
)) +
borders("state") +
geom_segment(arrow = arrow(length = unit(0.1, "cm"))) +
coord_quickmap() +
labs(y = "Latitude", x = "Longitude") +
#theme_void()
flights_latlon %>%
slice(1:100) %>%
ggplot(aes(
x = origin_lon, xend = dest_lon,
y = origin_lat, yend = dest_lat
)) +
borders("state") +
geom_segment(arrow = arrow(length = unit(0.1, "cm"))) +
coord_quickmap() +
labs(y = "Latitude", x = "Longitude")
#theme_void()
flights_latlon %>%
slice(1:100) %>%
ggplot(aes(
x = origin_lon, xend = dest_lon,
y = origin_lat, yend = dest_lat
)) +
borders("state") +
geom_segment(arrow = arrow(length = unit(0.1, "cm"))) +
coord_quickmap() +
labs(y = "Latitude", x = "Longitude")
theme_void()
cd ..
ls
install.packages("igraph")
install.packages("statnet")  #installs ergm, network, and sna
install.packages("snahelper")
install.packages("netUtils")
install.packages("ggraph")
install.packages("backbone")
install.packages("netrankr")
install.packages("signnet")
install.packages("egor")
install.packages("intergraph")
install.packages("graphlayouts")
install.packages("visNetwork")
install.packages("patchwork")
install.packages("edgebundle")
install.packages("ggplot2")
install.packages("gganimate")
install.packages("ggforce")
install.packages("rsiena")
install.packages("remotes")
remotes::install_github("schochastics/networkdata")
1-0.9599
setwd("~/Documents/GitHub/quarto-homepage")
setwd("~/Documents/GitHub/quarto-homepage")
setwd("~/Documents/GitHub/quarto-homepage")
ls
# draw normal curves
ggplot(data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1), col='#69b3a2', size=2) +
stat_function(fun = dnorm, args = list(mean = 0, sd = .5), col='orange',size=2)+
stat_function(fun = dnorm, args = list(mean = 1.5, sd = 0.75), col='brown',size=2) +
theme_classic() +
labs(x ="x", y = "likelihood") +
theme(
axis.title.x = element_text(color="black", size=18),
axis.text.x = element_text(color="black", size=14),
axis.text.y=element_text(color="black", size=14),
axis.title.y=element_text(color="black", size=18),
legend.position="none")
# both in one plot
data <-  data.frame(
type = c( rep("group1", 39), rep("group2", 39) ),
value = c( hept$z_run200, hept$z_lj )
)
# standard normal curve
ggplot(data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1), col='brown', size=2) +
theme_classic() +
labs(x ="z", y = " ") +
theme(
axis.title.x = element_text(color="black", size=14),
axis.text.x = element_text(color="black", size=12),
axis.text.y=element_blank(),
axis.title.y=element_text(color="black", size=18),
axis.line.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="none")
library(tidyverse)
library(mgcv)
library(hrbrthemes)
theme_set(theme_minimal())
install.packages("hrbrthemes")
library(mgcv)
theme_set(theme_minimal())
dens <- data %>%
ggplot( aes(x = value,  fill = type, color = type)) +
geom_density(lwd = 0.5,  alpha = 0.5)  +
scale_color_manual(values = c("#69b3a2", "#404080")) +
scale_fill_manual(values = c("#69b3a2", "#404080")) +
#geom_histogram( aes(y = ..density..),
#                color = "white", alpha=0.6, bins = 20,
#                position = 'identity') +
labs(x ="z", y = " ") +
theme_classic() +
theme(
axis.title.x = element_text(color="black", size=18),
axis.text.x = element_text(color="black", size=14),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y=element_blank(),
legend.position="none")
# standard normal curve
ggplot(data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1), col='brown', size=2) +
theme_classic() +
labs(x ="z", y = " ") +
theme(
axis.title.x = element_text(color="black", size=14),
axis.text.x = element_text(color="black", size=12),
axis.text.y=element_blank(),
axis.title.y=element_text(color="black", size=18),
axis.line.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="none")
# both in one plot
data <-  data.frame(
type = c( rep("group1", 39), rep("group2", 39) ),
value = c( hept$z_run200, hept$z_lj )
)
hist <- data %>%
ggplot( aes(x = value,  fill = type, color = type)) +
#  geom_density(lwd = 0.5,  alpha = 0.5)  +
scale_color_manual(values = c("#69b3a2", "#404080")) +
scale_fill_manual(values = c("#69b3a2", "#404080")) +
geom_histogram( aes(y = ..density..),
color = "white", alpha=0.5, bins = 20,
position = 'identity') +
labs(x ="z", y = " ") +
theme_classic() +
theme(
axis.title.x = element_text(color="black", size=18),
axis.text.x = element_text(color="black", size=14),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y=element_blank(),
legend.position="none")
# both in one plot
data <-  data.frame(
type = c( rep("group1", 39), rep("group2", 39) ),
value = c( hept$z_run200, hept$z_lj )
)
dens <- data %>%
ggplot( aes(x = value,  fill = type, color = type)) +
geom_density(lwd = 0.5,  alpha = 0.5)  +
scale_color_manual(values = c("#69b3a2", "#404080")) +
scale_fill_manual(values = c("#69b3a2", "#404080")) +
#geom_histogram( aes(y = ..density..),
#                color = "white", alpha=0.6, bins = 20,
#                position = 'identity') +
labs(x ="z", y = " ") +
theme_classic() +
theme(
axis.title.x = element_text(color="black", size=18),
axis.text.x = element_text(color="black", size=14),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y=element_blank(),
legend.position="none")
# both in one plot
data <-  data.frame(
type = c( rep("group1", 39), rep("group2", 39) ),
value = c( hept$z_run200, hept$z_lj )
)
?hept
ggplot(data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 0.5), col='brown', size=2) +
theme_classic() +
labs(x ="z", y = " ") +
theme(
axis.title.x = element_text(color="black", size=14),
axis.text.x = element_text(color="black", size=12),
axis.text.y=element_blank(),
axis.title.y=element_text(color="black", size=18),
axis.line.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="none")
setwd("~/Documents/GitHub/quarto-homepage")
setwd("~/Dropbox/ts/uni_konstanz/2023/teaching/statistical-learning/course-material/r-scripts-lectures/02-linear-regression-I")
ggplot(data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 0.5), col='brown', size=2) +
theme_classic() +
labs(x ="z", y = " ") +
theme(
axis.title.x = element_text(color="black", size=14),
axis.text.x = element_text(color="black", size=12),
axis.text.y=element_blank(),
axis.title.y=element_text(color="black", size=18),
axis.line.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="none")
ggplot(data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 0.5), col='steelblue', size=2) +
theme_classic() +
labs(x ="z", y = " ") +
theme(
axis.title.x = element_text(color="black", size=14),
axis.text.x = element_text(color="black", size=12),
axis.text.y=element_blank(),
axis.title.y=element_text(color="black", size=18),
axis.line.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="none")
ggplot(data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 2.5), col='darkturquoise', size=2) +
theme_classic() +
labs(x ="z", y = " ") +
theme(
axis.title.x = element_text(color="black", size=14),
axis.text.x = element_text(color="black", size=12),
axis.text.y=element_blank(),
axis.title.y=element_text(color="black", size=18),
axis.line.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="none")
ggplot(data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 2), col='darkturquoise', size=2) +
theme_classic() +
labs(x ="z", y = " ") +
theme(
axis.title.x = element_text(color="black", size=14),
axis.text.x = element_text(color="black", size=12),
axis.text.y=element_blank(),
axis.title.y=element_text(color="black", size=18),
axis.line.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="none")
ggplot(data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1.5), col='darkturquoise', size=2) +
theme_classic() +
labs(x ="z", y = " ") +
theme(
axis.title.x = element_text(color="black", size=14),
axis.text.x = element_text(color="black", size=12),
axis.text.y=element_blank(),
axis.title.y=element_text(color="black", size=18),
axis.line.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="none")
ggplot(data.frame(x = c(-4, 4)), aes(x)) +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1.2), col='darkorange', size=2) +
theme_classic() +
labs(x ="z", y = " ") +
theme(
axis.title.x = element_text(color="black", size=14),
axis.text.x = element_text(color="black", size=12),
axis.text.y=element_blank(),
axis.title.y=element_text(color="black", size=18),
axis.line.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position="none")
