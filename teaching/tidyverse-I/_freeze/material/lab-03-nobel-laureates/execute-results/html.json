{
  "hash": "ad33592f740cebc491536b4d70ba7684",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 03 - Nobel laureates\"\noutput: \n  tufte::tufte_html:\n    css: ../lab.css\n    tufte_variant: \"envisioned\"\n    highlight: pygments\nlink-citations: true\n---\n\n\n\n\nIn January 2017, Buzzfeed published an article on why Nobel laureates show immigration is so important for American science.\nYou can read the article [here](https://www.buzzfeednews.com/article/peteraldhous/immigration-and-science).\nIn the article they show that while most living Nobel laureates in the sciences are based in the US, many of them were born in other countries.\nThis is one reason why scientific leaders say that immigration is vital for progress.\nIn this lab we will work with the data from this article to recreate some of their visualizations as well as explore new questions.\n\n# Learning goals\n\n-   Collaborating on GitHub and resolving merge conflicts\n-   Replicating published results\n-   Data wrangling and visualisation\n\n# Lab prep\n\nYou have two tasks you should complete before the lab:\n\n-   **Task 1:** Read the Buzzfeed article titled [*These Nobel Prize Winners Show Why Immigration Is So Important For American Science*](https://www.buzzfeednews.com/article/peteraldhous/immigration-and-science)*.* We will replicate this analysis in the workshop so it's crucial that you're familiar with it ahead of time.\n-   **Task 2:** Read about merge conflicts below. The merge conflict exercise we'll start with during the lab will assume that you have this background information.\n\n## Merges and merge conflicts\n\nThis is the second week you're working in teams, so we're going to make things a little more interesting and let all of you make changes and push those changes to your team repository.\nSometimes things will go swimmingly, and sometimes you'll run into merge conflicts.\nSo our first task today is to walk you through a merge conflict!\n\n-   Pushing to a repo replaces the code on GitHub with the code you have on your computer.\n-   If a collaborator has made a change to your repo on GitHub that you haven't incorporated into your local work, GitHub will stop you from pushing to the repo because this could overwrite your collaborator's work!\n-   So you need to explicitly \"merge\" your collaborator's work before you can push.\n-   If your and your collaborator's changes are in different files or in different parts of the same file, git merges the work for you automatically when you \\*pull\\*.\n-   If you both changed the same part of a file, git will produce a \\*\\*merge conflict\\*\\* because it doesn't know how which change you want to keep and which change you want to overwrite.\n\nGit will put conflict markers in your code that look like:\n\n    <<<<<<< HEAD \n\n    See also: [dplyr documentation](https://dplyr.tidyverse.org/)   \n\n    ======= \n\n    See also [ggplot2 documentation](https://ggplot2.tidyverse.org/)  \n\n    >>>>>>> some1alpha2numeric3string4\n\nThe `===`s separate *your* changes (top) from *their* changes (bottom).\n\nNote that on top you see the word `HEAD`, which indicates that these are your changes.\n\nAnd at the bottom you see `some1alpha2numeric3string4` (well, it probably looks more like `28e7b2ceb39972085a0860892062810fb812a08f`).\n\nThis is the **hash** (a unique identifier) of the commit your collaborator made with the conflicting change.\n\nYour job is to *reconcile* the changes: edit the file so that it incorporates the best of both versions and delete the `<<<`, `===`, and `>>>` lines.\nThen you can stage and commit the result.\n\n# Merge conflict activity\n\n## Setup\n\n-   Clone the repo and open the .Rmd file.\n-   Assign the numbers 1, 2, 3, and 4 to each of the team members. If your team has fewer than 4 people, some people will need to have multiple numbers. If your team has more than 4 people, some people will need to share some numbers.\n\n## Let's cause a merge conflict!\n\nOur goal is to see two different types of merges: first we'll see a type of merge that git can't figure out on its own how to do on its own (a **merge conflict**) and requires human intervention, then another type of where that git can figure out how to do without human intervention.\n\nDoing this will require some tight choreography, so pay attention!\n\nTake turns in completing the exercise, only one member at a time.\n**Others should just watch, not doing anything on their own projects (this includes not even pulling changes!)** until they are instructed to.\nIf you feel like you won't be able to resist the urge to touch your computer when it's not your turn, we recommend putting your hands in your pockets or sitting on them!\n\n**Before starting**: everyone should have the repo cloned and know which role number(s) they are.\n\n**Role 1:**\n\n-   Change the team name to your actual team name.\n-   Knit, commit, push.\n\n🛑 Make sure the previous role has finished before moving on to the next step.\n\n**Role 2:**\n\n-   Change the team name to some other word.\n-   Knit, commit, push. You should get an error.\n-   Pull. Take a look at the document with the merge conflict.\n-   Clear the merge conflict by editing the document to choose the correct/preferred change.\n-   Knit.\n-   **Click the Stage checkbox** for all files in your Git tab. Make sure they all have check marks, not filled-in boxes.\n-   Commit and push.\n\n🛑 Make sure the previous role has finished before moving on to the next step.\n\n**Role 3:**\n\n-   Change the a label of the first code chunk\n-   Knit, commit, push. You should get an error.\n-   Pull. No merge conflicts should occur, but you should see a message about merging.\n-   Now push.\n\n🛑 Make sure the previous role has finished before moving on to the next step.\n\n**Role 4:**\n\n-   Change the label of the first code chunk to something other than previous role did.\n-   Knit, commit, push. You should get an error.\n-   Pull. Take a look at the document with the merge conflict. Clear the merge conflict by choosing the correct/preferred change. Commit, and push.\n\n🛑 Make sure the previous role has finished before moving on to the next step.\n\n**Everyone:** Pull, and observe the changes in your document.\n\n## Tips for collaborating via GitHub\n\n-   Always pull first before you start working.\n-   Resolve a merge conflict (commit and push) *before* continuing your work. Never do new work while resolving a merge conflict.\n-   Knit, commit, and push often to minimize merge conflicts and/or to make merge conflicts easier to resolve.\n-   If you find yourself in a situation that is difficult to resolve, ask questions ASAP. Don't let it linger and get bigger.\n\n# Getting started\n\nGo to the course GitHub organization and locate your lab repo, which should be named `lab-03-nobel-laureates-YOUR_GITHUB_USERNAME`.\nGrab the URL of the repo, and clone it in RStudio.\nFirst, open the R Markdown document `lab-03.Rmd` and Knit it.\nMake sure it compiles without errors.\nThe output will be in the file markdown `.md` file with the same name.\n\n## Warm up\n\nBefore we introduce the data, let's warm up with some simple exercises.\n\n-   Update the YAML, changing the author name to your name, and **knit** the document.\n-   Commit your changes with a meaningful commit message.\n-   Push your changes to GitHub.\n-   Go to your repo on GitHub and confirm that your changes are visible in your Rmd **and** md files. If anything is missing, commit and push again.\n\n## Packages\n\nWe'll use the **tidyverse** package for much of the data wrangling.\nThis package is already installed for you.\nYou can load them by running the following in your Console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Data\n\nThe dataset for this assignment can be found as a CSv (comma separated values) file in the `data` folder of your repository.\nYou can read it in using the following.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel <- read_csv(\"data/nobel.csv\")\n```\n:::\n\n\nThe variable descriptions are as follows:\n\n-   `id`: ID number\n-   `firstname`: First name of laureate\n-   `surname`: Surname\n-   `year`: Year prize won\n-   `category`: Category of prize\n-   `affiliation`: Affiliation of laureate\n-   `city`: City of laureate in prize year\n-   `country`: Country of laureate in prize year\n-   `born_date`: Birth date of laureate\n-   `died_date`: Death date of laureate\n-   `gender`: Gender of laureate\n-   `born_city`: City where laureate was born\n-   `born_country`: Country where laureate was born\n-   `born_country_code`: Code of country where laureate was born\n-   `died_city`: City where laureate died\n-   `died_country`: Country where laureate died\n-   `died_country_code`: Code of country where laureate died\n-   `overall_motivation`: Overall motivation for recognition\n-   `share`: Number of other winners award is shared with\n-   `motivation`: Motivation for recognition\n\nIn a few cases the name of the city/country changed after laureate was given (e.g. in 1975 Bosnia and Herzegovina was called the Socialist Federative Republic of Yugoslavia).\nIn these cases the variables below reflect a different name than their counterparts without the suffix \\`\\_original\\`.\n\n-   `born_country_original`: Original country where laureate was born\n-   `born_city_original`: Original city where laureate was born\n-   `died_country_original`: Original country where laureate died\n-   `died_city_original`: Original city where laureate died\n-   `city_original`: Original city where laureate lived at the time of winning the award\n-   `country_original`: Original country where laureate lived at the time of winning the award\n\n# Exercises\n\nTake turns answering the exercises.\nMake sure each team member gets to commit to the repo by the time you submit your work.\nAnd make sure that the person taking the lead for an exercise is sharing their screen.\nYou don't have to switch at each exercise, you can find your a cadence that works for your team and stick to it.\n\n## Get to know your data\n\n1.  How many observations and how many variables are in the dataset? Use inline code to answer this question. What does each row represent?\n\nThere are some observations in this dataset that we will exclude from our analysis to match the Buzzfeed results.\n\n2.  Create a new data frame called `nobel_living` that filters for\n\n-   laureates for whom `country` is available\n-   laureates who are people as opposed to organizations (organizations are denoted with `\"org\"` as their `gender`)\n-   laureates who are still alive (their `died_date` is `NA`)\n\n\n::: {.cell}\n\n:::\n\n\nConfirm that once you have filtered for these characteristics you are left with a data frame with 228 observations, once again using inline code.\n\n🧶 ✅ ⬆️ Knit, *commit, and push your changes to GitHub with an appropriate commit message. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards.*\n\n## Most living Nobel laureates were based in the US when they won their prizes\n\n... says the Buzzfeed article.\nLet's see if that's true.\n\nFirst, we'll create a new variable to identify whether the laureate was in the US when they won their prize.\nWe'll use the `mutate()` function for this.\nThe following pipeline mutates the `nobel_living` data frame by adding a new variable called `country_us`.\nWe use an if statement to create this variable.\nThe first argument in the `if_else()` function we're using to write this if statement is the condition we're testing for.\nIf `country` is equal to `\"USA\"`, we set `country_us` to `\"USA\"`.\nIf not, we set the `country_us` to `\"Other\"`.\n\n\n::: {.cell}\n\n```{.marginfigure .cell-code}\nNote that we can achieve the same result using the `fct_other()` function we've seen before (i.e. with `country_us = fct_other(country, \"USA\")`). We decided to use the `if_else()` here to show you one example of an if statement in R.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel_living <- nobel_living %>%\n  mutate(\n    country_us = if_else(country == \"USA\", \"USA\", \"Other\")\n  )\n```\n:::\n\n\nNext, we will limit our analysis to only the following categories: Physics, Medicine, Chemistry, and Economics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel_living_science <- nobel_living %>%\n  filter(category %in% c(\"Physics\", \"Medicine\", \"Chemistry\", \"Economics\"))\n```\n:::\n\n\nFor the next exercise work with the `nobel_living_science` data frame you created above.\nThis means you'll need to define this data frame in your R Markdown document, even though the next exercise doesn't explicitly ask you to do so.\n\n3.  Create a faceted bar plot visualizing the relationship between the category of prize and whether the laureate was in the US when they won the nobel prize.\n    Interpret your visualization, and say a few words about whether the Buzzfeed headline is supported by the data.\n\n    -   Your visualization should be faceted by category.\n    -   For each facet you should have two bars, one for winners in the US and one for Other.\n    -   Flip the coordinates so the bars are horizontal, not vertical.\n\n🧶 ✅ ⬆️ Knit, *commit, and push your changes to GitHub with an appropriate commit message. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards.d*\n\n## But of those US-based Nobel laureates, many were born in other countries\n\n\n::: {.cell}\n\n```{.marginfigure .cell-code}\n**Hint:** You should be able to ~~cheat~~ borrow from code you used earlier to create the `country_us` variable.\n```\n:::\n\n\n4.  Create a new variable called `born_country_us` that has the value `\"USA\"` if the laureate is born in the US, and `\"Other\"` otherwise.\n    How many of the winners are born in the US?\n\n5.  Add a second variable to your visualization from Exercise 3 based on whether the laureate was born in the US or not.\n    Based on your visualization, do the data appear to support Buzzfeed's claim?\n    Explain your reasoning in 1-2 sentences.\n\n    -   Your final visualization should contain a facet for each category.\n    -   Within each facet, there should be a bar for whether the laureate won the award in the US or not.\n    -   Each bar should have segments for whether the laureate was born in the US or not.\n\n🧶 ✅ ⬆️ Knit, *commit, and push your changes to GitHub with an appropriate commit message. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards.*\n\n## Here's where those immigrant Nobelists were born\n\n\n::: {.cell}\n\n```{.marginfigure .cell-code}\nNote that your bar plot won't exactly match the one from the Buzzfeed article. This is likely because the data has been updated since the article was published.\n```\n:::\n\n\n6.  In a single pipeline, filter for laureates who won their prize in the US, but were born outside of the US, and then create a frequency table (with the `count()` function) for their birth country (`born_country`) and arrange the resulting data frame in descending order of number of observations for each country. Which country is the most common?\n\n🧶 ✅ ⬆️ Knit, *commit, and push your changes to GitHub with an appropriate commit message. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards and review the md document on GitHub to make sure you're happy with the final state of your work.*\n\nNow go back through your write up to make sure you've answered all questions and all of your R chunks are properly labelled.\nOnce you decide as a team that you're done with this lab, all members of the team should pull the changes and knit the R Markdown document to confirm that they can reproduce the report.\n\n# Interested in how Buzzfeed made their visualizations?\n\nThe plots in the Buzzfeed article are called waffle plots.\nYou can find the code used for making these plots in Buzzfeed's GitHub repo (yes, they have one!) [here](https://buzzfeednews.github.io/2017-01-immigration-and-science/).\nYou're not expected to recreate them as part of your assignment, but you're welcomed to do so for fun!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}