{
  "hash": "f183ea47838d56286a163eb1d7bcfb4b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Nobel Laureates\"\nauthor: \"[insert your name here]\"\nformat:\n  html:\n    embed-resources: true\neditor: visual\nexecute:\n  warning: false\n---\n\n\n\n\nIn January 2017, Buzzfeed published an article on why Nobel laureates show immigration is so important for American science. You can read the article [here](https://www.buzzfeednews.com/article/peteraldhous/immigration-and-science). In the article they show that while most living Nobel laureates in the sciences are based in the US, many of them were born in other countries. This is one reason why scientific leaders say that immigration is vital for progress. In this lab we will work with the data from this article to recreate some of their visualizations as well as explore new questions.\n\n# Learning goals\n\n-   Replicating published results\n-   Data wrangling and visualization\n\nRead the Buzzfeed article titled [*These Nobel Prize Winners Show Why Immigration Is So Important For American Science*](https://www.buzzfeednews.com/article/peteraldhous/immigration-and-science)*.* We will replicate this analysis in the workshop so it's crucial that you're familiar with it ahead of time.\n\n## Packages\n\nWe'll use the **tidyverse** package for much of the data wrangling. This package is already installed for you. You can load them by running the following in your Console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Data\n\nThe dataset for this assignment can be found as a CSV (comma separated values) file. You can read it in using the following.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel <- read_csv(\"data-hot-nob/nobel.csv\")\n```\n:::\n\n\nThe variable descriptions are as follows:\n\n-   `id`: ID number\n-   `firstname`: First name of laureate\n-   `surname`: Surname\n-   `year`: Year prize won\n-   `category`: Category of prize\n-   `affiliation`: Affiliation of laureate\n-   `city`: City of laureate in prize year\n-   `country`: Country of laureate in prize year\n-   `born_date`: Birth date of laureate\n-   `died_date`: Death date of laureate\n-   `gender`: Gender of laureate\n-   `born_city`: City where laureate was born\n-   `born_country`: Country where laureate was born\n-   `born_country_code`: Code of country where laureate was born\n-   `died_city`: City where laureate died\n-   `died_country`: Country where laureate died\n-   `died_country_code`: Code of country where laureate died\n-   `overall_motivation`: Overall motivation for recognition\n-   `share`: Number of other winners award is shared with\n-   `motivation`: Motivation for recognition\n\nIn a few cases the name of the city/country changed after laureate was given (e.g. in 1975 Bosnia and Herzegovina was called the Socialist Federative Republic of Yugoslavia). In these cases the variables below reflect a different name than their counterparts without the suffix \\`\\_original\\`.\n\n-   `born_country_original`: Original country where laureate was born\n-   `born_city_original`: Original city where laureate was born\n-   `died_country_original`: Original country where laureate died\n-   `died_city_original`: Original city where laureate died\n-   `city_original`: Original city where laureate lived at the time of winning the award\n-   `country_original`: Original country where laureate lived at the time of winning the award\n\n# Exercises\n\n## Get to know your data\n\n1.  How many observations and how many variables are in the dataset? Use inline code to answer this question. What does each row represent?\n\nThere are some observations in this dataset that we will exclude from our analysis to match the Buzzfeed results.\n\n2.  Create a new data frame called `nobel_living` that filters for\n\n-   laureates for whom `country` is available\n-   laureates who are people as opposed to organizations (organizations are denoted with `\"org\"` as their `gender`)\n-   laureates who are still alive (their `died_date` is `NA`)\n\n\n::: {.cell}\n\n:::\n\n\nConfirm that once you have filtered for these characteristics you are left with a data frame with 228 observations, once again using inline code.\n\n## Most living Nobel laureates were based in the US when they won their prizes\n\n... says the Buzzfeed article. Let's see if that's true.\n\nFirst, we'll create a new variable to identify whether the laureate was in the US when they won their prize. We'll use the `mutate()` function for this. The following pipeline mutates the `nobel_living` data frame by adding a new variable called `country_us`. We use an if statement to create this variable. The first argument in the `if_else()` function we're using to write this if statement is the condition we're testing for. If `country` is equal to `\"USA\"`, we set `country_us` to `\"USA\"`. If not, we set the `country_us` to `\"Other\"`.\n\n**Note**: we can achieve the same result using the `fct_other()` function we've seen before (i.e. with `country_us = fct_other(country, \"USA\")`). We decided to use the `if_else()` here to show you one example of an if statement in R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel_living <- nobel_living %>%\n  mutate(\n    country_us = if_else(country == \"USA\", \"USA\", \"Other\")\n  )\n```\n:::\n\n\nNext, we will limit our analysis to only the following categories: Physics, Medicine, Chemistry, and Economics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel_living_science <- nobel_living %>%\n  filter(category %in% c(\"Physics\", \"Medicine\", \"Chemistry\", \"Economics\"))\n```\n:::\n\n\nFor the next exercise work with the `nobel_living_science` data frame you created above.\n\n3.  Create a faceted bar plot visualizing the relationship between the category of prize and whether the laureate was in the US when they won the nobel prize. Interpret your visualization, and say a few words about whether the Buzzfeed headline is supported by the data.\n\n    -   Your visualization should be faceted by category.\n    -   For each facet you should have two bars, one for winners in the US and one for Other.\n    -   Flip the coordinates so the bars are horizontal, not vertical.\n\n## But of those US-based Nobel laureates, many were born in other countries\n\n**Hint:** You should be able to ~~cheat~~ borrow from code you used earlier to create the `country_us` variable.\n\n4.  Create a new variable called `born_country_us` that has the value `\"USA\"` if the laureate is born in the US, and `\"Other\"` otherwise. How many of the winners are born in the US?\n\n5.  Add a second variable to your visualization from Exercise 3 based on whether the laureate was born in the US or not. Based on your visualization, do the data appear to support Buzzfeed's claim? Explain your reasoning in 1-2 sentences.\n\n    -   Your final visualization should contain a facet for each category.\n    -   Within each facet, there should be a bar for whether the laureate won the award in the US or not.\n    -   Each bar should have segments for whether the laureate was born in the US or not.\n\n## Here's where those immigrant Nobelists were born\n\n**Note**: your bar plot won't exactly match the one from the Buzzfeed article. This is likely because the data has been updated since the article was published.\n\n6.  In a single pipeline, filter for laureates who won their prize in the US, but were born outside of the US, and then create a frequency table (with the `count()` function) for their birth country (`born_country`) and arrange the resulting data frame in descending order of number of observations for each country. Which country is the most common?\n\n# Interested in how Buzzfeed made their visualizations?\n\nThe plots in the Buzzfeed article are called waffle plots. You can find the code used for making these plots in Buzzfeed's GitHub repo (yes, they have one!) [here](https://buzzfeednews.github.io/2017-01-immigration-and-science/). You're not expected to recreate them as part of your assignment, but you're welcomed to do so for fun!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}